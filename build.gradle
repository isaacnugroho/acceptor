plugins {
  id "net.ltgt.apt-eclipse" version "0.21"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.github.hierynomus.license" version"0.15.0"
}

apply plugin: "application"
sourceCompatibility = '11'
targetCompatibility = '11'
version "0.1"
group "io.zenkoderz.io.labs"
repositories {
  mavenCentral()
  maven { url "https://jcenter.bintray.com" }
}
configurations {
  // for dependencies that are needed for development only
  developmentOnly
}
dependencies {
  annotationProcessor 'org.projectlombok:lombok:1.18.12'
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-validation"
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-views-freemarker:1.3.2"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut:micronaut-validation"
  implementation "javax.annotation:javax.annotation-api"
  implementation "io.micronaut.reactor:micronaut-reactor"
  implementation "org.apache.commons:commons-lang3:3.11"
  runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
  runtime "org.freemarker:freemarker:2.3.28"

  compile 'com.google.googlejavaformat:google-java-format:1.7'
  compileOnly 'org.projectlombok:lombok:1.18.12'

  testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  testAnnotationProcessor "io.micronaut:micronaut-inject-java"
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
  testCompileOnly 'org.projectlombok:lombok:1.18.12'
  testCompile "io.micronaut.test:micronaut-test-junit5"
  testCompile "org.junit.jupiter:junit-jupiter-api"
  testRuntime "org.junit.jupiter:junit-jupiter-engine"
}
test.classpath += configurations.developmentOnly
mainClassName = "io.zenkoderz.io.labs.acceptor.Application"
// use JUnit 5 platform
test {
  useJUnitPlatform()
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}

shadowJar {
  mergeServiceFiles()
}

license {
  header rootProject.file('./config/HEADER')
  mapping("java", "SLASHSTAR_STYLE")
  strictCheck true
  skipExistingHeaders true
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
}

tasks.withType(JavaExec) {
  classpath += configurations.developmentOnly
  jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
  if (gradle.startParameter.continuous) {
    systemProperties(
        'micronaut.io.watch.restart': 'true',
        'micronaut.io.watch.enabled': 'true',
        "micronaut.io.watch.paths": "src/main"
    )
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}